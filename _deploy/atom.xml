<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Claudson Oliveira]]></title>
  <link href="http://cloudson.github.io/atom.xml" rel="self"/>
  <link href="http://cloudson.github.io/"/>
  <updated>2015-01-21T23:26:16-02:00</updated>
  <id>http://cloudson.github.io/</id>
  <author>
    <name><![CDATA[Claudson Oliveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ligando extensões a linguagens no Vim]]></title>
    <link href="http://cloudson.github.io/2014/10/15/ligando-extensoes-a-linguagens-no-vim/"/>
    <updated>2014-10-15T23:31:00-03:00</updated>
    <id>http://cloudson.github.io/2014/10/15/ligando-extensoes-a-linguagens-no-vim</id>
    <content type="html"><![CDATA[<p>Estou engatinhando no vim, porém já venho substituído meu editor de texto principal (o sublime). Trabalhando com Drupal, muitos arquivos possuem extensões que fogem do padrão da linguagem php, então nesse pequeno post mostro como dizer pro editor que a extensão X refere-se à linguagem Y.</p>

<p>Primeiramente criarei um arquivo de configuração de nome .vimrc na home do meu usuário local.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="err">&quot;</span> em ~/.vimrc
</span><span class='line'>
</span><span class='line'>autocmd BufRead,BufNewFile <span class="se">\*</span>.module <span class="nb">set </span><span class="nv">filetype</span><span class="o">=</span>php
</span></code></pre></td></tr></table></div></figure>


<p>Com essa linha estamos executando um comando automaticamente no vim assim que lermos ou abrirmos um arquivo que termina com <strong>.module</strong>, esse comando seta o editor dizendo que o tipo de arquivo é um php.
Como executar esse arquivo a cada chamada do vim ? Vamos chamá-lo no arquivo /etc/vim/vimrc no debian</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot; final do arquivo /etc/vim/vimrc</span>
</span><span class='line'>
</span><span class='line'><span class="s2">. &quot;</span>~/.vimrc<span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pronto! :)
Este post é mais uma daquelas dicas rápidas que seguem de lembrete pra mim. Caso você descubra uma forma mais legal de resolver o problema, não deixe de comentar. Abraços.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Streams em PHP]]></title>
    <link href="http://cloudson.github.io/2014/09/06/streams-em-php/"/>
    <updated>2014-09-06T20:26:00-03:00</updated>
    <id>http://cloudson.github.io/2014/09/06/streams-em-php</id>
    <content type="html"><![CDATA[<p>Estudantes da Certificação PHP já leram, temeram ou irão em algum momento ouvir falar de streams em php.<br/>
Neste post vamos tentar desmistificar a dificuldade ao redor do assunto.
A motivação pra escrever sobre, surgiu de uma conversa que tivemos no <a href="http://valor.com.br">Valor</a>, um amigo apresentou o tema, e achei interessante replicá-lo aqui.</p>

<h3>O que são streams</h3>

<p>Provavelmente você já manipulou arquivos em php, operações como abrir ou escrever num arquivo se tornam simples com as funções herdadas do C.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// abre um arquivo gerando um recurso manipulável</span>
</span><span class='line'><span class="nv">$handle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;meuarquivodeteste&quot;</span><span class="p">,</span> <span class="s2">&quot;a+&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// escreve no arquivo associado ao recurso </span>
</span><span class='line'><span class="nb">fwrite</span><span class="p">(</span><span class="nv">$handle</span><span class="p">,</span> <span class="s2">&quot;Isso é um teste&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// fecha o arquivo </span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mas se pararmos pra pensar, essas operações de manipulação de recursos (abrir, ler, escrever, buscar&hellip;) podem ser usadas não só em arquivos locais, mas em arquivos que podem ser acessados via http, por exemplo:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// lendo um arquivo servido via http(s) </span>
</span><span class='line'><span class="nv">$pathGist</span> <span class="o">=</span> <span class="s2">&quot;https://gist.githubusercontent.com/cloudson/6372b6907e298abb4c26/raw/fce2fb435326ca1d43b0ce0b1fe51599abf2ca9f/exemplo.txt&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$handle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$pathGist</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$string</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$handle</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tendo em vista essa semelhança, qualquer recurso que possa ter essas operações pode ser chamada de um(a) <strong>stream</strong> em php. Assim como fizemos via http, podemos utilizar essas mesmas funções em outros <em>contextos</em>.</p>

<h3>Contextos</h3>

<p>A linguagem já possui suporte para trabalhar com streams em certos contextos, alguns deles:</p>

<ul>
<li>file:// &ndash; Acesso local</li>
<li><a href="http://">http://</a> &ndash; Acesso via http(s)</li>
<li><a href="ftp://">ftp://</a> &ndash; Acesso via ftp(s)</li>
<li>php:// &ndash; Acesso I/O da linguagem</li>
<li>ssh2:// &ndash; Acesso via ssh2</li>
</ul>


<p>Perceba que o reconhecimento de contexto é feito automaticamente pela função que gera o recurso stream. A omissão do contexto indica o uso de file:// .</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// abrindo um arquivo local</span>
</span><span class='line'><span class="nv">$handle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;file://meuarquivo&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Contexto php://</h4>

<p>Também como herança do C, afirmar que imprimir algo na tela é o mesmo que escrever no arquivo STDOUT (Standard output) é verídico em php. Esse &ldquo;arquivo&rdquo; é acessado via protocolo php://</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// o mesmo que dar um echo na tela</span>
</span><span class='line'><span class="nv">$handle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;php://stdout&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">fwrite</span><span class="p">(</span><span class="nv">$handle</span><span class="p">,</span> <span class="s2">&quot;olá mundo&quot;</span><span class="o">.</span><span class="nx">PHP_EOL</span><span class="p">);</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alguns arquivos disponíveis por esse protocolo são:</p>

<ul>
<li>stdin &ndash; Usado para entrada de dados (read-only).</li>
<li>stdout &ndash; Usado para saída de dados (write-only).</li>
<li>stderr &ndash; Usado para saída de erros (por padrão a saída de erros é o mesmo que o stdout (write-only).</li>
<li>input &ndash; Utilizado para entrada de dados, via request, por exemplo se um post é enviado com um arquivo. É possível recuperá-lo via esse arquivo.</li>
<li>memory &ndash; Escrita e leitura de dados temporários em memória.</li>
<li>temp &ndash; Escrita e leitura em arquivo temporário físico no S.O (arquivo salvo em sys_get_temp_dir() )</li>
</ul>


<h4>Contexto compress.zlib://</h4>

<p>Há uma leve diferença entre os termos compactação e compressão de dados. Compactar quer dizer unir vários arquivos num só, como é possível usando o formato tar. Comprimir quer dizer que um algoritmo foi aplicado num arquivo de tal forma que seu tamanho foi minimizado. O gzip é um famoso algoritmo de compressão de dados.
Com esse contexto podemos ler arquivos comprimidos com gzip, e é o que faremos a seguir.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># criando um arquivo comprimido</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;olá&quot;</span> &gt;&gt; <span class="nb">test</span>
</span><span class='line'>gzip <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// lê o arquivo comprimido </span>
</span><span class='line'><span class="nv">$h</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;compress.zlib://test.gz&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$content</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$h</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$content</span><span class="o">.</span><span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$h</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Contexto zip://</h4>

<p>Como o zip é um algortimo de compressão que pode servir como compactador de arquivos, pode existir a necessidade de ler um arquivo dentro de um zip. É o que veremos abaixo:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// lê um arquivo dentro do gzip</span>
</span><span class='line'><span class="nv">$h</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;zip://test.gz#file1.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$content</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$h</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$content</span><span class="o">.</span><span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$h</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Criando um contexto</h3>

<p>A função <em>stream_context_create</em> cria um stream context em php. É questão de prova utiliza-la para mudar o comportamento padrão de alguma função.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// Um post será enviado para a url, ao invés do padrão get</span>
</span><span class='line'><span class="nv">$context</span> <span class="o">=</span> <span class="nb">stream_context_create</span><span class="p">([</span>
</span><span class='line'>   <span class="s2">&quot;http&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">&quot;method&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;post&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// perceba que o quarto parâmetro do fopen é um contexto</span>
</span><span class='line'><span class="nv">$handle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;http://gist.githubusercontent.com/cloudson/6372b6907e298abb4c26/raw/fce2fb435326ca1d43b0ce0b1fe51599abf2ca9f/exemplo.txt&quot;&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
</span><span class='line'><span class="nv">$content</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$handle</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$content</span><span class="o">.</span><span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wrappers</h3>

<p>A mágica não para por ae. Você pode encapsular sua própria forma de lidar com arquivos sob um protocolo, criando um <strong>wrapper</strong> .
Você deve escrever uma classe Wrapper que segue uma certa interface/sinópse:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// declarando uma classe que diz como manipular arquivos. </span>
</span><span class='line'><span class="k">class</span> <span class="nc">YourStreamWrapper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">public</span> <span class="k">function</span> <span class="nf">stream_open</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span> <span class="nv">$mode</span><span class="p">,</span> <span class="nv">$options</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$opened_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">public</span> <span class="k">function</span> <span class="nf">stream_read</span><span class="p">(</span><span class="nv">$count</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">public</span> <span class="k">function</span> <span class="nf">stream_write</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">public</span> <span class="k">function</span> <span class="nf">stream_tell</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">public</span> <span class="k">function</span> <span class="nf">stream_eof</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">function</span> <span class="nf">stream_seek</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$whence</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// usando a classe num novo protocolo declarado cloud:// </span>
</span><span class='line'><span class="nx">stream_wrapper_register</span><span class="p">(</span><span class="s2">&quot;cloud&quot;</span><span class="p">,</span> <span class="s2">&quot;YourStreamWrapper);</span>
</span><span class='line'>
</span><span class='line'><span class="s2">// você poderá usar fopen(&quot;</span><span class="nx">cloud</span><span class="o">://</span><span class="nb">file</span><span class="s2">&quot;,  &quot;</span><span class="nx">r</span><span class="s2">&quot;) ... :) </span>
</span></code></pre></td></tr></table></div></figure>


<p>Imagina que lindo poder ler arquivos do dropbox ou google drive utilizando a função fopen.
Criando wrappers específicos isso seria possível.</p>

<h3>Outras possibilidades</h3>

<p>Existem diversas funções sobre stream que facilitam a vida na hora de querer um certo comportamento.
É possível usar a <a href="http://php.net/manual/en/function.stream-context-set-default.php">stream_context_set_default</a> para declarar o protocolo padrão de stream, sobescrevedo o file:// . Definir o timeout de &ldquo;conexão&rdquo; com <a href="http://php.net/manual/en/function.stream-set-timeout.php">stream_set_timeout</a>.
Ou uma das coisas mais legais, na minha opinião, copiar conteúdo de arquivos entre streams com <a href="http://php.net/manual/en/function.stream-copy-to-stream.php">stream_copy_to_stream</a>.</p>

<h3>Conclusão</h3>

<p>Espero que depois do post não haja o que temer no assunto. Nele vimos o que são e a facilidade de trabalharmos com recursos stream, e como os utilizamos o tempo todo sem nem perceber.</p>

<h4>Fontes</h4>

<ul>
<li><a href="http://php.net/manual/en/wrappers.php">Protocolo e Wrappers de streams</a></li>
<li><a href="http://php.net/manual/en/class.streamwrapper.php">Class Wrapper como sinópse</a></li>
<li><a href="http://pt.wikipedia.org/wiki/Zlib">Zlib</a></li>
<li><a href="http://en.wikipedia.org/wiki/Tar_%28computing%29">Arquivos tar</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP - Entendendo uma negociação de conteúdo via cartas]]></title>
    <link href="http://cloudson.github.io/2014/08/12/entendendo-uma-negociacao-de-conteudo-via-cartas/"/>
    <updated>2014-08-12T22:17:00-03:00</updated>
    <id>http://cloudson.github.io/2014/08/12/entendendo-uma-negociacao-de-conteudo-via-cartas</id>
    <content type="html"><![CDATA[<p>Atualmente é quase impossível implementar um sistema sem estabelecer conexão com outros sistemas, uma arquitetura orientada a serviços é cada vez mais valorizada.
Hoje vamos falar um pouco sobre uma das características básicas do http e/ou de serviços sob a filosofia REST; <em>Content Negotiation</em>.</p>

<h2>A brincadeira</h2>

<p>Duas pessoas poliglotas resolvem trocar cartas em quaisquer idiomas que domiman, elas só precisam informar no envelope em que idioma a resposta deve ser enviada.</p>

<h3>Caso 1: Tudo ou nada</h3>

<p>João envia uma primeira carta para Maria perguntando como está seu novo emprego, seu envelope contém a informação</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Accept-Language: pt-BR
</span></code></pre></td></tr></table></div></figure>


<p>Recebida a carta, Maria entende que João aceita uma carta de resposta em português do Brasil, o que não é problema para uma mineira.
Ela envia a resposta e coloca no envolope</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Content-Language: pt-BR
</span></code></pre></td></tr></table></div></figure>


<p>Ou seja, ela está confirmando que sua carta de resposta está em tal língua.</p>

<h3>Caso 2: Várias Opções de línguas</h3>

<p>João resolve testar os conhecimentos de Maria e envia uma carta com o seguinte envelope</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Accept-Language: fr; q=1.0, en-US; q=0.3, pt-BR; q=0.2
</span></code></pre></td></tr></table></div></figure>


<p>Nesse envelope a informação de linguagem segue um padrão maluco que informa  <br/>
fr; q=1.0 &ndash; Me responda em francês, num ranking de fluência, eu dou 100% de importância pra ela.<br/>
en-US; q=0.3  &ndash; Se não falar francês, pode me responder em inglês americano.<br/>
pt-BR; q=0.2 &ndash; Por fim, me responda em português brasileiro mesmo ¬¬</p>

<p>Maria não fala francês e como viu que a segunda língua mais relevante pra João é o inglês, que domina, ela retorna</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Content-Language: en-US
</span></code></pre></td></tr></table></div></figure>


<h3>Caso 3: Línguas desconhecidas</h3>

<p>Num terceiro momento João envia uma carta pra maria pedindo uma resposta em chinês</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Accept-Language: zh
</span></code></pre></td></tr></table></div></figure>


<p>Mas &hellip; Maria não sabe falar essa língua e como ela não pode deixar João esperando, responde no envolope</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Status: 406
</span></code></pre></td></tr></table></div></figure>


<p>O campo de status fala sobre a resposta, nesse caso (<a href="http://httpstatus.es/406">406</a>), Maria informou que não consegue responder nessa língua.</p>

<h2>Cliente e Servidor</h2>

<p>Nos casos acima, João é o cliente, pode ser um navegador web, mas é mais interessante pensarmos genericamente num client consumindo uma api. Maria é o servidor que está expondo/servindo uma api.
As mensagens em questão são <em>requests</em> e <em>responses</em> HTTP, e o envelope representa na verdade um cabeçaho do protocolo.</p>

<h3>Negociação de conteúdo sobre mime-types</h3>

<p>O caso mais usado sobre negociação de conteúdo em serviços fala sobre tipos. Você pode/deve desenvolver uma api que serve, transparentemente, conteúdos em mime-types diferentes, pelo menos em xml e json. A estória é a mesma, porém os cabeçalhos usado são <em>Accept</em>/<em>Content-type</em>. Veja um exemplo:</p>

<p>Request:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Accept: application/json; q=1.0, text/html; q=0.5; */*; q=0.1
</span></code></pre></td></tr></table></div></figure>


<p>Response:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Status: 200
</span><span class='line'>Content-type: application/json
</span></code></pre></td></tr></table></div></figure>


<p>O Client pediu conteúdo em json ou html ou qualquer merda haha. <br/>
A aplicação, serviu um json.</p>

<h3>Conclusão</h3>

<p>Como vimos, a negociação de conteúdo é um mecanismo do http para que uma aplicação sirva um conteúdo (ou melhor, uma representação de um recurso) de modo que o cliente entenda, pode haver negociação sobre tipos (quero que você me sirva uma imagem ao invés de um json), sobre linguagens (quero essa página em inglês), sobre encodings e charsets.<br/>
Algumas (muitas) APIs fazem negociação de tipo via url, inserindo uma extensão (eu mesmo já <a href="http://phartitura.com/Guzzle/Http.png">fiz</a> <a href="http://phartitura.com/Guzzle/Http.json">isso</a>). Há bastante discussão sobre, não é a melhor maneira de se fazer, mas é a forma mais fácil e acessível via browser/humanos mais leigos. <br/>
Espero poder voltar e falar um pouco sobre status code, que é algo simples que muitas APIs importantes não respeitam.</p>

<h3>Referências</h3>

<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec12.html">RFC 2616</a><br/>
<a href="http://en.wikipedia.org/wiki/Content_negotiation">Wikipedia</a><br/>
<a href="http://httpstatus.es/">HTTP status</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Olhar urbano 01]]></title>
    <link href="http://cloudson.github.io/2014/08/11/olhar-urbano-01/"/>
    <updated>2014-08-11T23:08:00-03:00</updated>
    <id>http://cloudson.github.io/2014/08/11/olhar-urbano-01</id>
    <content type="html"><![CDATA[<p>São Paulo é uma cidade que fala com a gente. Passamos por manifestações com pressa, sempre atrasados.
Já faz alguns meses que venho colecionando imagens da cidade, muitas vezes de paredes pintadas. Resolvi exibi-las aqui no blog
aos poucos.</p>

<p><img src="http://cloudson.github.io/images/olharurbano/01.jpg" alt="" /></p>

<p>Essa imagem mostra uma crítica forte sobre as pichações da cidade. Enquanto todos afirmam que 1 + 1 = 3, apenas o pichação diz a verdade, uma verdade não
aceita e julgada.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitql - Do que é feito?]]></title>
    <link href="http://cloudson.github.io/2014/04/23/gitql-do-que-e-feito/"/>
    <updated>2014-04-23T09:02:00-03:00</updated>
    <id>http://cloudson.github.io/2014/04/23/gitql-do-que-e-feito</id>
    <content type="html"><![CDATA[<p>No começo do ano, um projeto bem legal apareceu no github, o <a href="https://github.com/dinedal/textql">textql</a>. Aquilo me fez pensar novamente &ldquo;Como não tive essa ideia?&rdquo;; Baseado num texto csv, poder fazer consultas sql. Simplesmente incrível.<br/>
Depois de dar uma olhada no projeto, voltei ao trabalho; códigos, git status, git commit, git log &hellip; &ldquo;Hey! Todo mundo sabe sql, mas nem todo mundo sabe git log&rdquo;, e daí pensei em criar o <a href="https://github.com/cloudson/gitql">gitql</a>, uma forma fácil de extrair informações de repositórios git usando uma linguagem de consulta.</p>

<h3>Desafios</h3>

<p>Olhei um pouco mais de perto o que o textql fazia. Como seu objetivo era ler um arquivo aparentemente imutável, a ferramenta primeiramente criava um banco sqlite e importava todos os dados para uma tabela. &ldquo;Não bom&rdquo; para meu caso. Repositórios git mudam a todo momento, uma suposta tabela de commits não iria parar de crescer. Ter um banco sqlite para cada repositório e sincronizá-lo antes de cada consulta estava fora de cogitação.<br/>
O que eu queria realmente era transformar o commando <code>select * from commits</code> em <code>git log</code>, ou seja, traduzir uma linguagem em outra.
Além disso, percebi que era uma boa hora para estudar &ndash; na prática &ndash; uma linguagem emergente; <a href="http://golang.org/">golang</a>.</p>

<h3>Enfrentando o terceiro dragão</h3>

<p>Para quem me conhece desde a época (não tão distante) da faculdade, sabe que sou um pouco viciado em Teoria de compiladores, linguagens e outras coisas malucas. É uma área meio conturbadora, tanto que um compilador acaba tendo um <a href="http://www.amazon.com/Compilers-Principles-Techniques-Tools-Edition/dp/0321486811">dragão</a> como símbolo. Mas como eu (junto a amigos) já tinha feito um <a href="https://github.com/cloudson/Bocejo">compilador de mini-java para assembly mips</a>, e um tcc que tinha um <a href="http://www.gcg.ufjf.br/cloudblocks/">interpretador de C para javascript</a>, toda a teoria ainda estava na minha cabeça (em algum lugar).</p>

<h3>Definindo a linguagem</h3>

<p>Gitql é somente leitura, então o interpretador acabaria rodando apenas comandos select, escrevi alguns exemplos úteis, como objetivo final.</p>

<p><code>select * from commits</code><br/>
<code>select author, message where (date &gt;= '2014-04-10' and date &lt; '2014-04-11') and (author = 'cloudson' or author = 'jeanpimentel')</code>
<code>select author, message where 'Fuck' in full_message</code>
&hellip;</p>

<p>Alguns casos eram tão específicos que eu mesmo não conseguiria gerar um git log com tal informação, o que me animava.
Definida as palavras chaves (ficaram de fora coisas como joins, alias e  group by), era hora de implementar as fases do compilador que tinham como objetivo gerar a <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a>.</p>

<h3>Como a coisa funciona mais abaixo?</h3>

<p><strong>select author from commits</strong><br/>
Por padrão temos um limite de 10 linhas, então o que fazemos é percorrer pelos últimos commits (utilizando <a href="https://github.com/libgit2/">libgit2</a>) e quando tivermos 10 sucessos, paramos. A cada sucesso guardamos author, que é <a href="https://github.com/cloudson/gitql/blob/64ab944ad750a6da26456136f9c40b2a616534f8/runtime/runtime.go#L344">transcrito para objeto commit.Author.Name</a>.</p>

<p><strong>select hash from commits where author = &lsquo;cloudson&rsquo; or author = &lsquo;jeanpimentel&rsquo;</strong>  <br/>
A heurística é a mesma mas vamos agora observar o que é um <strong>sucesso</strong>. Percorrendo os commits procuramos aqueles que casam complementamente com o where, ou seja, um sucesso é um commit que possui um dos dois autores.</p>

<p><strong> select message from commits order by date asc limit 2 </strong><br/>
Neste caso queremos os 2 primeiros commits de um repositório. Qual o problema deste exemplo? A princípio eu não tenho uma coleção de commits alocada em memória, tudo que vimos até agora é um algoritmo que vai montando uma coleção a medida que encontra sucessos. Isso nos dá uma limitação, a forma para resolver essa consulta seria <br/>
1º) Encontrando <strong>todas</strong> as mensagens de commits com sucesso.<br/>
2º) Ordenando essas mensagens (poderia ser por nome de author).<br/>
3º) Pegando apenas as 2 primeiras linhas.</p>

<p>Isso faz com que o algoritmo se torne menos eficiente (no tempo e no espaço) é o que tentei relatar na <a href="https://github.com/cloudson/gitql/issues/4">issue #4</a>.
Aparentemente não há outra forma, para que o order by funcione perfeitamente.</p>

<h3>Conclusão</h3>

<p>Valeu a pena todos os commits de madrugada para tentar finalizar a ferramenta, e também por estudar mais go, fazia tempos que eu não achava uma linguagem tão divertida. <br/>
Também é <del>du caralho</del> gratificante receber 500 stars por uma ideia maluca. Divulgando no <a href="https://twitter.com/cloudson/status/455886564787519488">twitter</a> e no <a href="http://www.reddit.com/r/golang/comments/2334ys/gitql_a_git_query_language_built_with_golang/">reddit</a> gerou-se um movimento inesperado de <a href="https://twitter.com/search?q=gitql&amp;src=typd&amp;f=realtime">pessoas</a> <a href="http://www.reddit.com/r/git/comments/234e8y/gitql_a_git_query_language/">interessadas</a> no <a href="http://ruby5.envylabs.com/episodes/494-episode-457-april-18th-2014">projeto</a>. Insano!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mostrando o branch atual no bash]]></title>
    <link href="http://cloudson.github.io/2014/03/15/mostrando-o-branch-atual-no-bash/"/>
    <updated>2014-03-15T22:19:00-03:00</updated>
    <id>http://cloudson.github.io/2014/03/15/mostrando-o-branch-atual-no-bash</id>
    <content type="html"><![CDATA[<p>Quando estamos num console unix vemos uma área fixa que informa &ndash; geralmente &ndash; o usuário, a máquina e o diretório em que estamos no momento.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cloudson@Matrix:/var/www<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mas eu demorei um bocado para saber que dava para editar o padrão daquele área.<br/>
Existe uma váriavel PS1 relacionado a ele. Poderíamos setar</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;\u:\w$&quot;</span>;
</span></code></pre></td></tr></table></div></figure>


<p>Isso irá exibir <code>cloudson:/var/www$</code> pois \u ser refere ao usuário e \w ap diretório atual. Podemos usar várias outras varáveis pra compor a informação:</p>

<table>
<thead>
<tr>
<th>Caractere  </th>
<th>  Uso</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d  </td>
<td>  Data, no formato &ldquo;DiaDaSemana Mês Dia&rdquo; (exe; &ldquo;Tue May 26&rdquo;).   </td>
</tr>
<tr>
<td>\h  </td>
<td>  O nome do host. (exe; Matrix)   </td>
</tr>
<tr>
<td>\j  </td>
<td>  O número de jobs atualmente rodando via shell. </td>
</tr>
<tr>
<td>\t  </td>
<td>  Tempo, no formato de 24 horas HH:MM:SS . </td>
</tr>
<tr>
<td>\T  </td>
<td>  Tempo,  no formato de 12 horas HH:MM:SS . </td>
</tr>
<tr>
<td>\@  </td>
<td>  Tempo, no formato 12 horas am/pm. </td>
</tr>
<tr>
<td>\u  </td>
<td>  O nome do usuário atual. </td>
</tr>
<tr>
<td>\v  </td>
<td>  A versão do Bash (ex; 2.00) </td>
</tr>
<tr>
<td>\w  </td>
<td>  A atual diretório. </td>
</tr>
<tr>
<td>\W  </td>
<td>  O nome base do $PWD. </td>
</tr>
<tr>
<td>!  </td>
<td>  O número histórico desse comando. </td>
</tr>
<tr>
<td>\$  </td>
<td> Se você não for root, insere um &ldquo;$&rdquo;; se for root, você terá um &ldquo;#&rdquo; .</td>
</tr>
<tr>
<td>\n  </td>
<td> Uma quebra de linha.  </td>
</tr>
<tr>
<td>\e  </td>
<td> An escape character.   </td>
</tr>
</tbody>
</table>


<p>Um exemplo útil seria exibir em qual branch estamos, caso possível.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;\u@\h:\w$(git branch 2&gt;/dev/null | grep &#39;^*&#39;)$ &quot;</span>;
</span></code></pre></td></tr></table></div></figure>


<p>E é isso! Agora não há perigo de estar num branch errado e só perceber tarde :)</p>

<p>Referências:</p>

<ul>
<li><a href="http://ss64.com/bash/syntax-prompt.html">http://ss64.com/bash/syntax-prompt.html</a></li>
<li><a href="http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html">http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phartitura - Um novo modo de observar suas dependências em php]]></title>
    <link href="http://cloudson.github.io/2014/03/09/phartitura-um-novo-modo-de-observar-suas-dependencias-em-php/"/>
    <updated>2014-03-09T23:30:00-03:00</updated>
    <id>http://cloudson.github.io/2014/03/09/phartitura-um-novo-modo-de-observar-suas-dependencias-em-php</id>
    <content type="html"><![CDATA[<p>Hi guys! Neste post vou falar um pouco sobre o projeto que codei nas últimas semanas, <a href="http://phartitura.com">o Phartitura</a>.</p>

<h3>Inspiração!</h3>

<p>O twitter virou uma grande fonte de links técnicos para mim, e por lá, vi alguém postando um site para comunidade node-js. O <a href="http://david-dm.org/">David-www</a>. Foi naquele momento que eu pensei &ldquo;cara, não tem isso pro composer!&rdquo;.
O David era uma aplicação/website que mostrava todas as dependências de um projeto hospedado no npm (gerenciador de dependências node-js), citando a versão mais atual e a versão que um projeto x usaria. Dessa forma ficaria fácil ver a distância entre as versões.</p>

<h3>A ilusão; &ldquo;Parece simples!&rdquo;</h3>

<p>Aparentemente parecia mamão com açúcar, eu precisava seguir um roteiro simples:</p>

<p>1) Consumir metadados de um projeto A/B do packagist  <br/>
   &ndash; Com alguma pesquisa percebi que o <a href="http://cloudson.github.io/2014/01/25/acessando-a-api-do-packagist/">packagist possuia uma interface para isso</a>.<br/>
2) Pegar uma dependência C/D e olhar para sua regra de versão  <br/>
   &ndash; Se C/D tem regra ~1.1, quer dizer que o composer vai baixar uma versão >=1.1.0 e &lt;1.2.0. <br/>
3) Definir qual a versão mais atual de C/D que casa com a regra.<br/>
4) Definir qual a versão mais atual (de todasss) de C/D. <br/>
5) Voltar pro passo 2 com outra dependência.</p>

<p>Implementar esse <em>Versioning Resolver</em> não era um dos casos mais simples porque o composer trabalha com muitos tipos de regras de versão (muitos um pouco distante do <a href="http://semver.org">semver</a> comum). Exemplos abaixo:</p>

<ul>
<li>~1.0</li>
<li>2.0.3-alpha</li>
<li>3.2.2-beta8</li>
<li>>2.0,&lt;=4.0.2</li>
<li>&lt;3.0.0 | > 5.0.3a</li>
<li>6.6.*</li>
<li>dev-master<br/>
&hellip;</li>
</ul>


<p>Eu poderia (e pesquisei sobre) usar uma biblioteca pronta que me respondesse a questão &ldquo;Eu tenho 3 versões, qual deleas é a mais nova que casa com a regra x?&rdquo;. O Mais perto disso que eu conseguiria, era usar o próprio composer/composer. Mas seria uma <em>library</em> muito grande para ter como dependência do phartitura, então decidi escrever eu mesmo esse <em>Resolver</em>! #facaNaCaveira.</p>

<h3>Desafios, desafios&hellip;</h3>

<p>Além disso, existiam outros &ldquo;problemas&rdquo;:</p>

<h4>Gargalo no curl/tempo de request</h4>

<p>O exemplo mais claro e querido é o <a href="http://phartitura.com/symfony/symfony">symfony/symfony</a>.
Quando você tenta ver uma phartitura do projeto, a aplicação vai pegar os metadados disponíveis pelo packagist deste projeto (ou seja, vai realizar aquele passo 1). Esses metadados vêm como json, vamos dar uma olhada na seção que nos interessa, as dependências:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;require&quot;</span><span class="p">:{</span>
</span><span class='line'>       <span class="nt">&quot;php&quot;</span><span class="p">:</span><span class="s2">&quot;&gt;=5.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/icu&quot;</span><span class="p">:</span><span class="s2">&quot;~1.0&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;doctrine\/common&quot;</span><span class="p">:</span><span class="s2">&quot;~2.2&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;twig\/twig&quot;</span><span class="p">:</span><span class="s2">&quot;~1.11&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;psr\/log&quot;</span><span class="p">:</span><span class="s2">&quot;~1.0&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;require-dev&quot;</span><span class="p">:{</span>
</span><span class='line'>       <span class="nt">&quot;doctrine\/data-fixtures&quot;</span><span class="p">:</span><span class="s2">&quot;1.0.*&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;doctrine\/dbal&quot;</span><span class="p">:</span><span class="s2">&quot;~2.2&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;doctrine\/orm&quot;</span><span class="p">:</span><span class="s2">&quot;~2.2,&gt;=2.2.3&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;monolog\/monolog&quot;</span><span class="p">:</span><span class="s2">&quot;~1.3&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;propel\/propel1&quot;</span><span class="p">:</span><span class="s2">&quot;1.6.*&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;ircmaxell\/password-compat&quot;</span><span class="p">:</span><span class="s2">&quot;1.0.*&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;ocramius\/proxy-manager&quot;</span><span class="p">:</span><span class="s2">&quot;&gt;=0.3.1,&lt;0.4-dev&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;replace&quot;</span><span class="p">:{</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/browser-kit&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/class-loader&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/config&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/console&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/css-selector&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/dependency-injection&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/debug&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/doctrine-bridge&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/dom-crawler&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/event-dispatcher&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/filesystem&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/finder&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/form&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/framework-bundle&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/http-foundation&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/http-kernel&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/intl&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/locale&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/monolog-bridge&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/options-resolver&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/process&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/propel1-bridge&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/property-access&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/proxy-manager-bridge&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/routing&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/security&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/security-bundle&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/serializer&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/stopwatch&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/swiftmailer-bridge&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/templating&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/translation&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/twig-bridge&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/twig-bundle&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/validator&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/web-profiler-bundle&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;symfony\/yaml&quot;</span><span class="p">:</span><span class="s2">&quot;self.version&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'> <span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>As informações são bem parecidas com um composer.json, então para descobrir dados de cada dependência, é preciso fazer várias novas requests pro packagist perguntando sobre cada uma dessas. Entendeu o problema com o Symfony? São MUITAS dependências. <br/>
Como seria insano forçar todos os usuários a esperar essas trocentas requests com CURL, serializei a informação no Redis com TTL de algumas horas, isso torna um segundo pedido para symfony/symfony incrivelmente rápido mas acaba não dando uma visão exata do pacote. Por exemplo, se neste exato momento o symfony está cacheado no Phartitura, e no github sair um novo release, levará horas para que a informação mude. Abri uma <a href="https://github.com/cloudson/Phartitura/issues/4">issue</a> para criar um console job (provavelmente com <a href="http://symfony.com/doc/current/components/console/introduction.html">symfony/console</a>) que atualiza esses caras automaticamente.</p>

<h4>Priorizando as versões</h4>

<p>Outro problema divertido foi/é responder a pergunta &ldquo;Como eu sei qual a versão mais atual entre X,Y e Z?&rdquo;. Você pode pensar rapidamente, o timestamp de release da tag/versão responde isso mas &hellip; <br/>
* A versão dev-master sempre é encontrada (e não pode ser descartada, já que alguns projetos apontam pra ela &ndash; tsc tsc tsc) <br/>
* A versão dev-develop também é sempre encontrada e pode estar à frente de tags<br/>
* Alguns projetos (Como o Symfony) mantêm duas ou mais versões   simultaneamente, então um release para a 2.3.4 pode vir depois de um release para a 2.4.1 :(  <br/>
* Algumas pessoas versionam com umas tags %$@#!% 1.0.0-alpha8 (o composer por exemplo ¬¬). Cara, o mundo inteiro está usando algo alpha há mais de dois anos? Para mim o composer está na versão 1.0.x</p>

<p>Implementei uma <a href="http://www.php.net/manual/en/class.splmaxheap.php">SplMaxHeap</a> para que a medida que eu fosse inserindo versões nessa pilha, ele ordenasse deixando a mais prioritária no topo. A classe atual está com problemas (como aquele citado sobre o symfony) e é encontrada <a href="https://github.com/cloudson/Phartitura/blob/master/src/Cloudson/Phartitura/Project/VersionHeap.php">aqui</a>.</p>

<h4>Negociação de conteúdo com Respect/Rest</h4>

<p>Foi um bom momento para estudar um pouco sobre HTTP/REST. Com a ferramenta brasileira, <a href="https://github.com/respect/rest#content-negotiation">foi muito simples dar o primeiro passo</a> para a tarefa
<code>Se alguém quiser consumir os dados de um projeto como json, retorne como json</code>.</p>

<p>Mas depois a situação foi ficando um pouco mais complicada. Geralmente as pessoas não usam cabeçalho http para negociar contéudo com serviços, elas usam a própria url. Então para a url <a href="http://phartitura.com/cloudson/gandalf">http://phartitura.com/cloudson/gandalf</a> eu criei uma rota <a href="http://phartitura.com/cloudson/gandalf.json">http://phartitura.com/cloudson/gandalf.json</a> . Acho que encontrei um problema na priorização das rotas do Respect/Rest:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">;</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/*/*.json&#39;</span><span class="p">,</span> <span class="nv">$jsonCallback</span><span class="p">);</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/*/*&#39;</span><span class="p">,</span> <span class="nv">$htmlCallback</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setando essas duas rotas, a ferramenta não sabe qual é a mais prioritária, escolhendo a segunda :( Provavelmente eu vá abrir uma issue daqui a uns dias, ou você mesmo pode fazer isso. <br/>
As prioridades são dadas pelo número de <em>wild cards</em>, então resolvi da seguinte forma :</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">;</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/*/*.json&#39;</span><span class="p">,</span> <span class="nv">$jsonCallback</span><span class="p">);</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/*/**&#39;</span><span class="p">,</span> <span class="nv">$htmlCallback</span><span class="p">);</span> <span class="c1">// três *</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusão</h3>

<p>Foi um projeto bem legal e desafiador. Prova que qualquer &ldquo;escritor de códigos&rdquo; pode lançar algo a nível mundial, pois apesar do maior número de acessos vir do brasil, Phartitura teve acessos de EUA, Inglaterra, Alemanha, Canada, Índia, Austrália, Japão&hellip; são 39 países nesse momento.<br/>
Sobre o futuro, há muito a se implementar, quero fazer análise para projetos privados (subindo o composer.json), refatorar código, aumentar a cobertura de testes, criar jobs que atualizem informações no phartitura automaticamente, envio de notificação sobre novos releases para usuários que assim quiserem&hellip;
Enfim, o céu é o limite! Fiquem com a música tema do projeto</p>

<iframe width="420" height="315" src="http://cloudson.github.io//www.youtube.com/embed/k1-TrAvp_xs" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acessando a API do Packagist]]></title>
    <link href="http://cloudson.github.io/2014/01/25/acessando-a-api-do-packagist/"/>
    <updated>2014-01-25T23:41:00-02:00</updated>
    <id>http://cloudson.github.io/2014/01/25/acessando-a-api-do-packagist</id>
    <content type="html"><![CDATA[<p>Essa semana precisei consumir dados de pacotes disponibilizados pelo composer. Procurei na <a href="http://github.com/composer">organization oficial</a> por um client mas não encontrei.
Percebi que nunca tinha ouvido falar se o composer/packagist disponibilizava uma API para consumo de informações sobre os pacotes.</p>

<p>Depois de algumas buscas encontrei uns links úteis que responderam minha dúvida (veja as fontes no final do post) e irei escrever alguns exemplos de requests para consumir dados.</p>

<h3>Listando pacotes de uma organization</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://packagist.org/packages/list.json?vendor<span class="o">=</span>respect
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;packageNames&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;respect/config&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/data&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/loader&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/relational&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/rest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/template&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/test&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/validation&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/validation-bundle&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Buscando pacotes por uma tag</h3>

<p>(atributo tag encontrado no composer.json, não confundir com git tag :P ).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://packagist.org/search.json?tags<span class="o">=</span>respect
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;packageNames&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;respect/config&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/data&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/loader&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/relational&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/rest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/template&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/test&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/validation&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;respect/validation-bundle&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Buscando pacotes pelo nome</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://packagist.org/search.json?q<span class="o">=</span>cloudson
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;results&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;cloudson/gandalf&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://packagist.org/packages/cloudson/gandalf&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;downloads&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;favers&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;total&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pegando dados de um repositório específico</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://packagist.org/packages/cloudson/gandalf.json
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;package&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;cloudson/gandalf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;time&quot;</span><span class="p">:</span> <span class="s2">&quot;2014-01-26T00:26:17+00:00&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;maintainers&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;cloudson&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;claudsonweb@gmail.com&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;versions&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;dev-master&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;cloudson/gandalf&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nt">&quot;homepage&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;version_normalized&quot;</span><span class="p">:</span> <span class="s2">&quot;9999999-dev&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nt">&quot;authors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Claudson Oliveira&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;cloudson@outlook.com&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/cloudson/Gandalf.git&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;reference&quot;</span><span class="p">:</span> <span class="s2">&quot;6050511663c47ba1bba37cd5e6ca0dde3eb72575&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;dist&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;zip&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://api.github.com/repos/cloudson/Gandalf/zipball/6050511663c47ba1bba37cd5e6ca0dde3eb72575&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;reference&quot;</span><span class="p">:</span> <span class="s2">&quot;6050511663c47ba1bba37cd5e6ca0dde3eb72575&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;shasum&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;library&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;time&quot;</span><span class="p">:</span> <span class="s2">&quot;2014-01-26T00:20:55+00:00&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;psr-0&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Gandalf&quot;</span><span class="p">:</span> <span class="s2">&quot;src/&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Gandalf/Tests&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;0.7.0&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;cloudson/gandalf&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nt">&quot;homepage&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.7.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;version_normalized&quot;</span><span class="p">:</span> <span class="s2">&quot;0.7.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nt">&quot;authors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Claudson Oliveira&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;cloudson@outlook.com&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/cloudson/Gandalf.git&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;reference&quot;</span><span class="p">:</span> <span class="s2">&quot;119fa3309ea4a988ca44cfa63a349bf4c21cca6f&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;dist&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;zip&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://api.github.com/repos/cloudson/Gandalf/zipball/119fa3309ea4a988ca44cfa63a349bf4c21cca6f&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;reference&quot;</span><span class="p">:</span> <span class="s2">&quot;119fa3309ea4a988ca44cfa63a349bf4c21cca6f&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;shasum&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;library&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;time&quot;</span><span class="p">:</span> <span class="s2">&quot;2014-01-26T00:12:17+00:00&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;psr-0&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Gandalf&quot;</span><span class="p">:</span> <span class="s2">&quot;src/&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;Gandalf/Tests&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;library&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/cloudson/Gandalf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;downloads&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;total&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;monthly&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;daily&quot;</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;favers&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Você pode acabar percebendo uma certa semelhança entra as URIs citadas e aquelas acessadas no packagist (html), de fato essa semelhança existe e serve também como base pra consumir outras informações.</p>

<p>Este foi um post rápido apenas para divulgar conhecimento e servir de lembrete pra mim. Até a próxima :)</p>

<p>fontes:
<a href="https://groups.google.com/forum/#!topic/composer-dev/pb_Jo_cu4IA">https://groups.google.com/forum/#!topic/composer-dev/pb_Jo_cu4IA</a>  <br/>
<a href="https://github.com/KnpLabs/packagist-api">https://github.com/KnpLabs/packagist-api</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O que caiu na ZCPE?]]></title>
    <link href="http://cloudson.github.io/2013/12/19/o-que-caiu-na-zcpe/"/>
    <updated>2013-12-19T23:13:00-02:00</updated>
    <id>http://cloudson.github.io/2013/12/19/o-que-caiu-na-zcpe</id>
    <content type="html"><![CDATA[<p><img src="http://www.zend.com/topics/ZCE-PHP-Engineer-logo-XS.jpg" alt="" /><br/>
Meu último post tinha a intenção de ser uma série para quem está estudando para a certificação php.  O problema é que muita coisa aconteceu, a ZCE mudou, incluiu na sua grade o php 5.4 e 5.5, nomeou-se ZCPD e posteriormente ZCPE. <br/>
Marquei minha prova para um dia antes do voucher vencer (risos), decidi fazer a mais atual e <a href="http://zend.com/en/store/education/certification/yellow-pages.php#show-ClientCandidateID=ZEND024222">passei!</a>. <br/>
Abaixo listarei dez questões <strong>&ldquo;similares&rdquo;</strong> as que caíram, sintam-se a vontade para comentar sobre.</p>

<h3>1 &ndash; Qual a saída do código abaixo:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$foo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="nv">$foo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">bar</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">*</span> <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nv">$a</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$x</span> <span class="o">*</span> <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$m</span> <span class="o">=</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$m</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>a) 6 <br/>
b) 9 <br/>
c) 0 <br/>
d) Nenhuma das acima</p>

<p>Essa questão é bonita! rs. Um atributo receber uma função anônima não faz com que o mesmo posso ser chamado como um método, lembrei disso por causa de uma <a href="https://github.com/cloudson/Gandalf">brincadeira que fiz no github</a>.<br/>
Mesmo assim fiquei bem confuso pois achei que o $this dentro da primeira função anônima não era um ponteiro pro objeto de A, mas é. Sendo assim, a resposta correta é (a) 6 .</p>

<h3>2 &ndash; Qual palavra chave deveria ser usada na linha comentada com &ldquo;HERE&rdquo; para que o código funcione corretamente com a saída &ldquo;Item&rdquo;</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">self</span><span class="p">();</span> <span class="c1">// HERE</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">myName</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">__CLASS__</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="k">extends</span> <span class="nx">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">myName</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">__CLASS__</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="nx">Item</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'><span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">myName</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Questão sobre <a href="http://php.net/manual/pt_BR/language.oop5.late-static-bindings.php">late static binding</a>, usando a palavra reservada static, o método utilizado é o de Item.</p>

<h3>3 &ndash; Suponha que você possui a classe MyObject já definida</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyObject</span><span class="p">;</span>
</span><span class='line'><span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">array_walk</span><span class="p">(</span><span class="nv">$array</span><span class="p">,</span> <span class="nv">$foo</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Para que o código acima funcione, MyObject precisa:</p>

<p>a) Implementar a classe Callable <br/>
d) Implementar a classe Closure<br/>
b) Possuir o método __call <br/>
c) Possuir o método __invoke</p>

<p>Dentro de array_walk o segundo parâmetro será chamado como uma função, basta que a classe MyObject implemente o método __invoke, (d).</p>

<h3>4 &ndash; Para conseguir usar a função count ou o construtor da linguagem sizeof em uma classe definida MyClass, essa classe precisa :</h3>

<p>a) Implementar a interface ArrayAccess<br/>
b) Possuir o método __count<br/>
c) Ser convertido de um array para o objeto <br/>
d) Nenhuma das anteriores</p>

<p>Para que um objeto possa ser usado na função count, ele precisa implementar a interface Countable, que exige o método count. Letra (d)</p>

<h3>5 &ndash; Qual a saída do código abaixo:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nx">boolval</span><span class="p">(</span><span class="k">new</span> <span class="nx">\StdClass</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>a) true<br/>
b) false</p>

<p>Resposta certa é (a) true (e eu poderia jurar que um objeto standard vazio se comportaria como um array vazio mas&hellip;)</p>

<h3>6 &ndash; Qual a saída do código abaixo</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span>  <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$array</span> <span class="k">as</span> <span class="o">&amp;</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$value</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$valores</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">update</span><span class="p">(</span><span class="nv">$valores</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>a) 2,3,4<br/>
b) 2,3,6<br/>
c) 1,2,3<br/>
d) 0,0,0</p>

<p>Problema que exigiu conhecimentos em escopos, vetor passado por referência e iterado &ldquo;por referência&rdquo; também. Assim que o laço foreach termina a variável $value mantém o último valor do array, logo a resposta era (b).</p>

<h3>7 &ndash; Qual função php inverte os valores de um array sem alterar as chaves?</h3>

<p>a) array_split<br/>
b) array_reverse <br/>
c) ksort<br/>
d) sort</p>

<p>Tipo de questão que eu odeio, apenas decoreba importa, resposta (b).</p>

<h3>8 &ndash; Qual a saída do código abaixo</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">namespace</span> <span class="nx">MyFramework\MyNamespace</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">myMethod</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">__METHOD__</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">myMethod</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>a) MyFramework\MyNamespace\MyClass\myMethod<br/>
b) MyFramework\MyNamespace\MyClass::myMethod<br/>
c) MyFramework\MyNamespace\myMethod<br/>
c) MyClass::myMethod</p>

<p>A resposta inclui o namespace completo, letra (b).</p>

<h3>9 &ndash; Qual o resultado da operação abaixo</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span> <span class="o">^</span> <span class="mi">2</span> <span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Utilizando o operador de ou exclusivo (^) a reposta correta é 3 pois  <br/>
  01   <br/>
  10<br/>
  11</p>

<p>A resposta é 11, seguindo o meu <a href="http://cloudson.github.io/2013/09/28/conversao-de-base-numerica/">post sobre conversão de base numérica</a>, dá 3.</p>

<h3>10 &ndash; Qual a saída para o programa abaixo ?</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">operacao</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">operacao</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">operacao</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Tentativa de pegadinha com passagem por referência, mas o resultado é 22 mesmo. :)</p>

<h3>Conclusão</h3>

<p>Outros temas que caíram na prova mas eu não consigo lembrar a questão inteira: <br/>
* Caiu traits e resolução de conflitos com metodos com o mesmo nome. <br/>
* Caiu uma questão simples pedindo para dizer como desabilitar os erros com uma diretiva do php.ini, a função error_reporting era uma das alternativas rsrs. <br/>
* Como vimos acima caiu bastante sobre as interfaces da SPL.<br/>
* Algumas questões de segurança, envolvendo roubo de sessão e como se previnir ou quais funções php podem evitar ataques vindo do usuário. <br/>
* Caiu algumas questões sobre streams, tinha uma questão que mudou o contexto  da função <a href="http://php.net/manual/pt_BR/function.file-get-contents.php">file_get_contents</a> e fazia ela usar post, por exemplo. <br/>
* Cairam questões sobre upload (e segurança). <br/>
* Não caiu nada sobre generators.</p>

<p>Não achei a prova extremamente fácil porque não estudei por meses como gostaria de ter feito, senão poderia ter ficado mais tranquilo durante. Mas a prova não é absurdamente difícil pra quem já trabalha com a linguagem há anos.
Um dos motivos de eu escolher a 5.5 é porque prefiro fazer questões de comportamento de código/oop do que decorar funções, e de fato o primeiro tipo caiu bastante. <br/>
Espero que o post encoraje muita gente! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estudo dirigido ZCE]]></title>
    <link href="http://cloudson.github.io/2013/10/06/estudo-dirigido-zce/"/>
    <updated>2013-10-06T21:43:00-03:00</updated>
    <id>http://cloudson.github.io/2013/10/06/estudo-dirigido-zce</id>
    <content type="html"><![CDATA[<p>A ZCE é a prova de cerficação oficial para programadores php. Essa semana a Zend anunciou uma <a href="http://shop.zend.com/en/zend-php5-certification-voucher.html">nova prova baseada nas versões mais atuais do php</a>. Na phpconference do ano passado, consegui um voucher pra cerficação, e até hoje não fui fazer a prova.
O tempo está passando e eu acabarei indo pra guerra por livre e espontânea pressão.  <br/>
Mas como dizem que a melhor forma de aprender é ensinando, então a proposta é gerar posts com questões para (eu mesmo) estudar pra prova. Dessa vez vamos abordar questões bem simples, muitas sobre coerção de tipos e conversão de base numérica.<br/>
As respostas para as questões estão no final do post, se encontrar algum erro, é só deixar um comentário.</p>

<h3>1- Qual dos seguintes comentários é inválido em php? :</h3>

<p>a) // foo <br/>
b) /* bar */ <br/>
c) # baz<br/>
d) None above</p>

<h3>2- Qual a saída do código abaixo:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nv">$foo</span> <span class="o">=</span> <span class="mo">017</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$foo</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>a) Fatal error<br/>
b) 18  <br/>
c) 16<br/>
d) 25</p>

<h3>3- Selecioee uma ou mais alternativas corretas:</h3>

<p>a) 3.14 == 3.142<br/>
b) 314e-2 == 3.14 <br/>
c) 3.14 == 314e2 <br/>
d) 3 == 3.14</p>

<h3>4- Selecione uma ou mais alternativas incorretas:</h3>

<p>a) 0xF &lt; 015 <br/>
b) 0x0a0 == 160  <br/>
c) 0xf &lt; 15 <br/>
d) 0xf == 0x0f</p>

<h3>5- Veja o código abaixo e assinale a alternativa correta:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nv">$cloud</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$zce</span>   <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$cloud</span> <span class="o">==</span> <span class="k">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>a) true<br/>
b) false<br/>
c) 23 <br/>
d) None above</p>

<h3>6- Selecione um ou mais respostas corretas:</h3>

<p>a) &ldquo;&rdquo; == false<br/>
b) &ldquo;00&rdquo; == false<br/>
c) &ldquo;0&rdquo; == false<br/>
d) &ldquo; &rdquo; == false<br/>
e) &ldquo;false&rdquo; == true</p>

<h3>7- Veja o código abaixo e responda :</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$foo</span> <span class="o">=</span> <span class="s2">&quot;Zend Compiler&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="err">$</span><span class="mi">2</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;Hip Hop&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$foo</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">2</span><span class="nx">foo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>a) true<br/>
b) false<br/>
c) Error <br/>
d) &ldquo;Zend Compiler Hip Hop&rdquo;</p>

<h3>8 &ndash; Qual a saída do código abaixo:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">menu</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;====ZCE day!====&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="s2">&quot;menu&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>a) Fatal error<br/>
b) &ldquo;menu&#8221;<br/>
c) &rdquo;====ZCE day!====&ldquo;<br/>
d) None above</p>

<h3>9 &ndash; Qual a saída do código abaixo:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nv">$foo</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$bar</span> <span class="o">=</span> <span class="k">new</span> <span class="k">stdClass</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$foo</span><span class="p">),</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$bar</span><span class="p">),</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$baz</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>a) Fatal Error<br/>
b) false, true, false<br/>
c) false, false, true <br/>
d) true, true, false</p>

<h3>10 &ndash; Selecione uma ou mais respostas incorretas:</h3>

<p>a) 1 | 2 == 1<br/>
b) 1 ^ 3 == 2 <br/>
c) 2 ^ 3 == 8 <br/>
d) 2 &amp; 3 == 2</p>

<h3>Respostas</h3>

<p>Update 02/02/14: Agradecimentos ao <a href="http://github.com/rogeriopradoj">@rogeriopradoj</a> que revisou o gabarito com várias alternatias incorretas! :)</p>

<h4>1d</h4>

<p>Os três tipos de comentários apresentados são válidos, para minha surpresa, já que eu nunca tinha usado # .</p>

<h4>2c</h4>

<p>Fiz um <a href="http://cloudson.github.io/2013/09/28/conversao-de-base-numerica/">post sobre conversão de base numérica aqui</a>, se você não soube responder essa, o texto pode te ajudar. Mas a conta realizada foi a seguinte:
017 = 1 x 8<sup>1</sup> + 7 x 8<sup>0</sup> = 7 + 8 = 15</p>

<h4>3b</h4>

<p>314e-2 é 3.14 em notação cientifica, o mesmo que 314 x 10^-2</p>

<h4>4a,c</h4>

<p>0xf é 15 em hexadecimal e 015 é 15 em octal, o que afirma que a) e c) são incorretas. 0x0a0 == a x 16<sup>1</sup> == 10 x 16<sup>1</sup> == 160 e 0xf == 0x0f == 15</p>

<h4>5a</h4>

<p>0 convertido para um boolean é false, outro numérico qualquer é considerado true</p>

<h4>6a,d,e</h4>

<p>Mais sobre coerção de tipos <a href="http://www.php.net/manual/en/language.types.boolean.php#language.types.boolean.casting">http://www.php.net/manual/en/language.types.boolean.php#language.types.boolean.casting</a></p>

<h4>7c</h4>

<p>A variável $2foo não possui um nome válido, pois começa com um número <a href="http://www.php.net/manual/en/language.variables.basics.php">http://www.php.net/manual/en/language.variables.basics.php</a></p>

<h4>8c</h4>

<p>Um novo tipo foi definido no php 5.4 (?). Um callable é como o nome diz um valor que pode invocar uma função. Esses callables podem ser funções anônimas, ou até mesmo strings contendo o nome de uma função, como é o nosso caso.</p>

<h4>9b</h4>

<p>Como o próprio nome diz, a função isset testa se uma variável foi declarada (ou se uma região da memória associada ao identificador, existe)<a href="http://php.net/manual/pt_BR/function.isset.php">http://php.net/manual/pt_BR/function.isset.php</a></p>

<h4>10a,c</h4>

<p>Essa questão tem a ver com álgebra de booleanos. Um gancho para um próximo post :)  <br/>
1 | 2 == 01 + 10 == 11 == 3<br/>
1 ^ 3 == 2<br/>
2 ^ 3 == 1  <br/>
2 &amp; 3 == 2</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conversão de base numérica]]></title>
    <link href="http://cloudson.github.io/2013/09/28/conversao-de-base-numerica/"/>
    <updated>2013-09-28T18:32:00-03:00</updated>
    <id>http://cloudson.github.io/2013/09/28/conversao-de-base-numerica</id>
    <content type="html"><![CDATA[<p>Não sei se esse é um tópico desnecessário mas vejo muitas questões de prova da ZCE (php) que se relacionam com conversão de base numérica. Se ajudar uma pessoa no mundo, já fico satisfeito.</p>

<h3>Começando do começo</h3>

<p>Com nossos algarismos indo-arábicos usamos a base 10. Ou seja, há 10 símbolos que representam qualquer número. Para um sistema computacional, a base utilizada é a 2, como você deve imaginar. Isso quer dizer que todas as representações utilizam 2 símbolos, o 0 e o 1. A seguir vamos ver como transformamos um número em base 10 para base 2:
Para descrobrirmos qual a representação do número 9 (base 10) para base 2, divimos o mesmo por 2 sucessivamente:</p>

<p>9 / 2 = 4 (resta 1) <br/>
4 / 2 = 2 (resta 0) <br/>
2 / 2 = 1 (resta 0)</p>

<p>Quando o resultado da divisão inteira for 1, o método para e você já tem a resposta da conversão.
O primeiro dígito binário é resultado da última divisão; 1. A seguir aparecem os restos das divisões de baixo para cima; 001. Ou seja, 9 em base 2 é 1001. <br/>
Vamos repetir o método para alguns números</p>

<p>8 / 2 = 4 (resta 0) <br/>
4 / 2 = 2 (resta 0)<br/>
2 / 2 = 1 (resta 0) <br/>
8 em base 2 é 1000</p>

<p>21 / 2 = 10 (resta 1)<br/>
10 / 2 = 5  (resta 0)<br/>
5  / 2 = 2  (resta 1)
2  / 2 = 1  (resta 0)
21 em base 2 é 10101</p>

<h3>E o caso contrário ?</h3>

<p>Eu tenho o número 1101 na base binária e quero saber qual sua representação na base decimal. Multiplicaremos cada dígito desse numero por 2 elevado a uma potência incremental (da direita pra esquerda). Ok, ficou mais confuso do que parece, veja abaixo:</p>

<p>1101 = 1*2<sup>3</sup> + 1*2<sup>2</sup> + 0*2<sup>1</sup> + 1*2<sup>0</sup> = 8 + 4 + 0 + 1 = 13</p>

<p>Para tirar a prova, vamos utilizar um número que convertemos na seção anterior, o 1001 (que deve dar 9):</p>

<p>1001 = 1*2<sup>3</sup> + 0*2<sup>2</sup> + 0*2<sup>1</sup> + 1*2<sup>0</sup> = 8 + 0 + 0 + 1 = 9</p>

<p>Satisfeito? :) Não? <br/>
Vamos pegar um número maior então, 101010:</p>

<p>101010 = 1*2<sup>5</sup> + 0 + 1*2<sup>3</sup> + 0 + 1*2<sup>1</sup> + 0 = 32 + 8 + 2 = 42</p>

<h3>E se eu estiver em outra base?</h3>

<p>Quando citei o php lá no começo do post estava me referindo aos números octais nele, veja o código abaixo:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nv">$foo</span> <span class="o">=</span> <span class="mo">013</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$bar</span> <span class="o">=</span> <span class="nv">$foo</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Qual o valor de $bar no fim do script? 18? Não. O valor é 16.<br/>
Se você nunca trabalhou com php, eu te perdôo. Números na linguagem que começam com 0 (da esquerda pra direita) são automaticamente interpretados como base 8. Questões relacionadas a octais na ZCE (certificação da linguagem) são comuns, então vamos a seguir fazer a conversão do octal 013 para decimal, para que assim tenhamos a prova da &ldquo;hipótese&rdquo; de que o resultado é 16.<br/>
A verdade é que não há nenhuma regra nova, a conversão de binário para decimal e de octal para decimal seguem o mesmo método, porém a base muda de 2 para 8 então &hellip;</p>

<p>013 = 0*8<sup>2</sup> + 1*8<sup>1</sup> + 3*8<sup>0</sup> = 0 + 8 + 3 = 11</p>

<p>Viram a diferença? Multiplicamos cada dígito por 8 elevado a um expoente incremental (incremental da direita pra esquerda rs).<br/>
11 + 5 = 16, como foi dito anteriormente.</p>

<h3>Já que estamos aqui, vamos falar também de &hellip;</h3>

<p>Hexadecimais! 16 símbolos para representar qualquer número. Os símbolos são :</p>

<table>
<thead>
<tr>
<th> Simbolo  </th>
<th>  Valor  </th>
</tr>
</thead>
<tbody>
<tr>
<td>   0      </td>
<td>   0    </td>
</tr>
<tr>
<td> 1 </td>
<td> 1 </td>
</tr>
<tr>
<td> 2 </td>
<td> 2 </td>
</tr>
<tr>
<td> 3 </td>
<td> 3 </td>
</tr>
<tr>
<td> 4 </td>
<td> 4  </td>
</tr>
<tr>
<td> 5 </td>
<td> 5  </td>
</tr>
<tr>
<td> 6 </td>
<td> 6  </td>
</tr>
<tr>
<td> 7 </td>
<td> 7  </td>
</tr>
<tr>
<td> 8 </td>
<td> 8  </td>
</tr>
<tr>
<td> 9 </td>
<td> 9  </td>
</tr>
<tr>
<td> a </td>
<td> 10  </td>
</tr>
<tr>
<td> b</td>
<td> 11  </td>
</tr>
<tr>
<td> c </td>
<td> 12</td>
</tr>
<tr>
<td> d </td>
<td> 13 </td>
</tr>
<tr>
<td> e </td>
<td> 14  </td>
</tr>
<tr>
<td> f </td>
<td> 15  </td>
</tr>
</tbody>
</table>


<p>Sendo redundante: A regra pra conversão de hexadecimal para decimal é a mesma, vamos converter o número #f00 para decimal:</p>

<p>f00 = f*16<sup>2</sup> + 0*16<sup>1</sup> + 0*16<sup>0</sup> = 15*16<sup>2</sup> + 0*16<sup>1</sup> + 0*16<sup>0</sup> = 15*256 + 0 + 0 = 3840 .</p>

<p>Perceba que usamos a tabela para converter as letras por valores numéricos, nada além disso.</p>

<h3>Conclusão</h3>

<p>Com essas regrinhas, não há o que temer :). Dúvidas? Mande um comentário ali aí.<br/>
Pretendo fazer mais posts de conhecimento menos específico como este, então nos veremos em breve. Até mais.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[News - 09/13]]></title>
    <link href="http://cloudson.github.io/2013/09/27/news-09-slash-13/"/>
    <updated>2013-09-27T22:22:00-03:00</updated>
    <id>http://cloudson.github.io/2013/09/27/news-09-slash-13</id>
    <content type="html"><![CDATA[<p>A ideia é ter uma série de posts rápidos sobre o que eu vi, li e/ou utilizei durante o mês.</p>

<h3>Vagrant</h3>

<p>Já trabalhei em lugares em que cada job tinha dependências diferentes. Um com php 5.2, outro com php 5.3+, e para quem não sabe, as coisas mudaram bastante entre essas versões. O Vagrant torna a administração de ambientes de desenvolvimento mais fácil por meio de virtualização, ele utiliza o virtualbox para subir maquinas virtuais facilmente acessíveis via ssh.</p>

<p><a href="http://www.vagrantup.com/">http://www.vagrantup.com/</a></p>

<h3>Octopress</h3>

<p>Esse é o cara! Eu já morro de preguiça de pagar hospedagem, preparar ambiente e manter um wordpress. Então pra esse blog, pensei em usar um gerador de sites estáticos utilizando o github pages e essa ferramenta, que possui gerenciamento de temas, posts e todo o mínimo que um blog precisa.</p>

<p><a href="http://octopress.org">http://octopress.org</a></p>

<h3>Golang</h3>

<p>Golang, ou simplesmente Go, é uma linguagem do nível do C. Diferente desta, Go é menos burocrática, fortemente regrada e mais&hellip; organizada.
A linguagem deve estar perto do período de hype (assim como ruby esteve há uns anos), eu sigo muitos devs no github, e do nada stars em projetos Go viraram rotina.<br/>
Hype ou não, é uma boa dica.</p>

<p><a href="http://golang.org/">http://golang.org/</a> <br/>
<a href="http://www.grokpodcast.com/2013/07/17/episodio-95-golang/">http://www.grokpodcast.com/2013/07/17/episodio-95-golang/</a></p>

<h3>Mondrian (php)</h3>

<p>Um cara muito doido utilizou teoria dos grafos para analisar códigos php e gerar relatórios sobre acoplamento entre classes e outros furos do SOLID.</p>

<p><a href="https://github.com/Trismegiste/Mondrian">https://github.com/Trismegiste/Mondrian</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meu metaframework em PHP]]></title>
    <link href="http://cloudson.github.io/2013/09/01/meu-metaframework-em-php/"/>
    <updated>2013-09-01T12:22:00-03:00</updated>
    <id>http://cloudson.github.io/2013/09/01/meu-metaframework-em-php</id>
    <content type="html"><![CDATA[<p>Há algumas semanas saiu um artigo (baseado em <em>achismos</em> talvez) sobre <a href="http://www.sitepoint.com/a-php-from-the-future/">o php do futuro</a>, e um dos pontos do autor foi que as pessoas começariam a utilizar mais metaframeworks. Eu concordo. A verdade é que com os microframeworks instantaneamente temos metaframeworks; ferramentas próprias geradas a partir de outras menores.
Eu mesmo, apesar de trabalhar com symfony há um tempo, nunca o utilizei em projetos pessoais &ndash; que <a href="http://temadehoje.gopagoda.com/">foram ou não pro ar</a>. <br/>
Neste post, vou mostrar meu skeleton ou metaframework padrão para aplicações php.</p>

<h3>Estrutura</h3>

<p>Vamos trabalhar num sistema de diretórios análogo ao abaixo:</p>

<p>&mdash;templates <br/>
&mdash;public <br/>
&mdash;cache <br/>
&mdash;vendor</p>

<h3>Composer</h3>

<p>Este cara não é um ingrediente, mas sem ele você não vai conseguir começar. O <a href="http://getcomposer.org/">Composer</a> é um gerenciador de dependências pra projetos php. Se sua aplicação vai usar a ferramenta X, Y e Z, você as descreve num arquivo de configuração, roda um comando e todas estarão disponíveis. Se por acaso você queira atualizar Y ou trocar Z por W, basta reconfigurar esse arquivo. Veja um exemplo abaixo:</p>

<figure class='code'><figcaption><span>[composer.json] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;MeuProjeto&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;autoload&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;psr-0&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;MeuProjeto&quot;</span> <span class="p">:</span> <span class="s2">&quot;src/&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;php&quot;</span> <span class="p">:</span> <span class="s2">&quot;&gt;= 5.3.8&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;silex/silex&quot;</span> <span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;respect/relational&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.7&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;twig/twig&quot;</span><span class="p">:</span> <span class="s2">&quot;1.6.0&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Acima, o <em>composer.json</em> diz que faremos uma aplicação que precisa rodar num php pelo menos na versão 5.3.8 e que dependerá de outras ferramentas, que citaremos melhor abaixo.
Vamos agora fazer com que essas dependências sejam baixadas.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>seu_diretorio_do_projeto
</span><span class='line'><span class="nv">$ </span>curl -s http://getcomposer.org/installer | php <span class="c"># baixa o composer </span>
</span><span class='line'><span class="nv">$ </span>php composer.phar install  <span class="c"># instala as dependencias</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Configuração</h3>

<p>Costumo usar algumas constantes &ndash; que variam de acordo com o ambiente &ndash; no projeto. Agrupo essas informações num arquivo config.php</p>

<figure class='code'><figcaption><span>[index.php] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// o composer gera um autoloader automático que já carrega as dependências</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/config.php&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>[config.php] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// configuração de envio de email</span>
</span><span class='line'><span class="c1">// ou configuração de uma app do facebook </span>
</span><span class='line'><span class="c1">// whatever</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// configurações de banco de dados</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/127.0.0.[0-9]+/&#39;</span><span class="p">,</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;SERVER_ADDR&#39;</span><span class="p">])){</span>
</span><span class='line'>   <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_USER&#39;</span><span class="p">,</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_PASS&#39;</span><span class="p">,</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_PATH&#39;</span><span class="p">,</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>   <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_USER&#39;</span><span class="p">,</span><span class="s1">&#39;motherfucker&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_PASS&#39;</span><span class="p">,</span><span class="s1">&#39;314159265359&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_PATH&#39;</span><span class="p">,</span><span class="s1">&#39;path_db.app.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Silex</h3>

<p>O <a href="http://silex.sensiolabs.org/">Silex</a> é um roteador, em poucas linhas você consegue escrever um programa que roda diferentes funções para cada url (rota) de sua aplicação.</p>

<figure class='code'><figcaption><span>[index.php] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/config.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Silex\Application</span><span class="p">();</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/home&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Estamos na home!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s2">&quot;/contato&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Página de contato!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Twig</h3>

<p>O <a href="http://twig.sensiolabs.org/">Twig</a> nasceu no ecossistema symfony (como quase tudo deste post). Ele é um motor de templates, uma forma de escrever o html com inserção de informações dinâmicas vindas da sua aplicação.<br/>
Vamos primeiro integrar o Twig ao Silex:</p>

<figure class='code'><figcaption><span>[index.php] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/config.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Apontando o twig para a pasta de cache e onde os arquivos html estarão</span>
</span><span class='line'><span class="nv">$twig_loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Loader_Filesystem</span><span class="p">(</span><span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/templates&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$twig</span>        <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="nv">$twig_loader</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;cache&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/cache&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Silex\Application</span><span class="p">();</span>
</span><span class='line'><span class="c1">// integrante do com silex</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="k">new</span> <span class="nx">Silex\Provider\TwigServiceProvider</span><span class="p">(),</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;twig.path&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/templates&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/home&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;Claudson Oliveira&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$app</span><span class="p">[</span><span class="s1">&#39;twig&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;home.html&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s2">&quot;/contato&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Página de contato!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>[home.html] language:html</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Blog<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- leia a documentacao do twig para inserir as variaveis --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Banco de dados</h3>

<p>Para persistência em banco de dados, usaremos um cara brasileiro que eu sou fã. O <a href="http://github.com/respect/relational">Respect\Relational</a>, com ele não há trabalho em escrever classes que representam tabelas, ou qualquer dificuldade de configuração.</p>

<figure class='code'><figcaption><span>[index.php] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/config.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instanciando o relational com pdo </span>
</span><span class='line'><span class="nv">$mapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mapper</span><span class="p">(</span><span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=seu_bd;host=&#39;</span><span class="o">.</span><span class="nx">DB_PATH</span><span class="p">,</span> <span class="nx">DB_USER</span><span class="p">,</span> <span class="nx">DB_PASS</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Apontando o twig para a pasta de cache e onde os arquivos html estarão</span>
</span><span class='line'><span class="nv">$twig_loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Loader_Filesystem</span><span class="p">(</span><span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/templates&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$twig</span>        <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="nv">$twig_loader</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;cache&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/cache&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Silex\Application</span><span class="p">();</span>
</span><span class='line'><span class="c1">// integrante do com silex</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="k">new</span> <span class="nx">Silex\Provider\TwigServiceProvider</span><span class="p">(),</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;twig.path&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/templates&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// usa o mapper pra listar todos os usuarios do sistema (supondo que a tabela exista)</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/home&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$mapper</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$usuarios</span> <span class="o">=</span> <span class="nv">$mapper</span><span class="o">-&gt;</span><span class="na">user</span><span class="o">-&gt;</span><span class="na">fetchAll</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$app</span><span class="p">[</span><span class="s1">&#39;twig&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;home.html&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;usuarios&#39;</span><span class="o">=&gt;</span> <span class="nv">$usuarios</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s2">&quot;/contato&quot;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Página de contato!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusão</h3>

<p>Vimos o básico para começar um projeto rapidamente; um controlador, uma engine de templates e uma ferramenta de persistência e consulta em banco de dados. A partir disso você pode plugar outras ferramentas, de validação, envio de email ou alguma api de rede social.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[E aí, tá gostando de SP?!]]></title>
    <link href="http://cloudson.github.io/2013/08/17/e-ai-ta-gostando-de-sp/"/>
    <updated>2013-08-17T14:59:00-03:00</updated>
    <id>http://cloudson.github.io/2013/08/17/e-ai-ta-gostando-de-sp</id>
    <content type="html"><![CDATA[<p>Bom, como você deve ter lido no pequeno <a href="http://cloudson.github.io/2013/08/17/begin/">primeiro post</a> do blog, sou um mineiro desbravando terras paulistan.. Hum, bom momento
para falar sobre a diferença entre paulistano e paulista, o primeiro nasceu/vive na cidade de São Paulo, e o segundo
é o mesmo que o mineiro, é o cara que nasceu/vive no estado de São Paulo, ok? rs. Mas bem, esse post não é (só) sobre isso.</p>

<p>Cheguei na cidade grande no 5º dia do 5º mês desse ano, e desde então amigos, familiares e conhecidos
têm me jogado essa pergunta; <em>&ldquo;E aí, Tá gostando de SP?!&rdquo;</em>. Eu poderia responder com uma direta falsa animação <em>&ldquo;Uai! Como não? São Paulo é foda,
a cidade não para, há tanta coisa pra se fazer e&hellip;&rdquo;</em> mas não é bem por aí. Neste momento se você está numa cidade menor e com a suposta qualidade de vida superior, está pensando <em>&ldquo;haha, se *udeu, falei pra ele que não valia a pena viver sob o estress de uma capital&rdquo;</em>, será mesmo que não vale a pena?
Abaixo vou listar pontos que eu gostaria de ter lido antes de vir pra cá, numa visão de quem chegou há menos de seis meses, e tentando ser bem honesto.</p>

<p><img src="http://www.angularaerofoto.com.br/data/photos/207_1Ponte_Estaiada_4.jpg" alt="A ponte estaiada" /></p>

<h3>Trânsito!!!!!!</h3>

<p>Certo. Quando pensamos numa cidade grande, pensamos em estress e quando pensamos em estress pensamos em trânsito.
Sim, a cidade é caótica nos horários de rush, parece que as pessoas nascem com carros por aqui, e há muitos deles rs.
No primeiro mês empregado, eu levava pouco mais que 1 hora para chegar ao trabalho, isso quer dizer 10 horas semanais dentro de um automóvel.
A pior parte do trajeto, claro, era que os ônibus da sptrans entravam no engarrafamento com os carros.
Mas há poucas semanas a <a href="http://g1.globo.com/sao-paulo/noticia/2013/08/faixa-no-corredor-norte-sul-deixa-passageiros-de-onibus-aliviados.html">prefeitura começou um projeto</a>
para dar prioridade a quem deixa o carro em casa e vai de transporte coletivo ao trabalho, está melhorando num sentido e piorando MUITO para quem tem carro.<br/>
Sobre transporte público, pode ter muito o que melhorar, mas comparado com as cidades que conheci e morei, ele é muito bom sim.
Metrôs e trens cortam a cidade toda, o cartão que as pessoas usam não é só por modinha ou pura economia dos empresários
(como lá na minha cidade natal).
Aqui rola &ldquo;integração&rdquo;; se você vai pegar vários transportes seguidos, terá descontos (usando o cartão) a partir do segundo (2 ônibus seguidos te custará R$ 3,00, em Juiz de fora &ndash; MG, te custa R$ 4,00).<br/>
O Segredo é morar perto do trabalho e começar a ler mais enquanto está no trânsito :)</p>

<h3>Poluição</h3>

<p>Como eu disse, há muitos carros, e consequentemente há muita poluição, quando vejo um céu totalmente azul até paro para admirá-lo. No crepúsculo poente, você pode ver o quanto de CO2 (e sabe-se lá mais o quê) foi liberado no dia.
Quando vim para cá, pensei em todos os lados ruins, mas confesso que este era o que pesava menos. Ingenuidade, como já tive problemas respiratórios na infância, já estou pensando em ir procurar um especialista para ver como está meu querido pulmão.</p>

<h3>Criminalidade</h3>

<p>Não há muito o que dizer, ela existe, pessoas conhecidas são assaltadas a todo momento. Você nunca está totalmente tranquilo em SP. É um preço por todas as outras coisas boas que a cidade oferece :(</p>

<h3>Desigualdade</h3>

<p>Na paulista você encontrará o maior desnivel social, quem sabe, da cidade. Artistas de TV moram lá, mas mendigos também. Jovens se drogam no meio da rua, artistas de rua começam carreira, recém chegados se escondem do frio, sem um teto pra dormir. Uma vez estava andando por lá e tinha uma limousine com várias meninas bebendo espumante (ou qualquer outra coisa que foge meu nivel social) e se divertindo como num filme.
Achei hilário e ao mesmo tempo muito non-sense. <br/>
A desigualdade em São Paulo é exagerada, pessoas ricas são muito ricas, estupidamente ricas, e eu sequer consigo ficar perto delas.
Parece um filme que é muito bom pela sua crítica chamado <a href="http://pt.wikipedia.org/wiki/The_Hunger_Games">Jogos vorazes</a>, vejam, vale a pena.</p>

<h3>O Paulistano!</h3>

<p>Lá no topo eu defini o paulistano como quem vive ou nasce em São Paulo, isso porque é difícil encontrar pessoas naturais daqui, e essas provavelmente têm pais de outros estados e cidades. A mistura aqui é das boas, somos mineiros, baianos, franceses, paraibanos, gaúchos &hellip; convivendo direta e indiretamente.
<a href="http://www.rocket-internet.de/">Lá onde eu trabalho mesmo</a> são tantos sotaques, que você pode até ficar perdido.<br/>
A xenofobia existe, infelizmente, de vez em quando você vê um maluco na internet falando que a cidade é dele e não dos invasores. Mas quem sofre mais são os nordestinos, que são MUITOS por aqui.
Baianada é sinônimo de trabalho ou ato mal feito, para você ver a que ponto chegamos.<br/>
Colocando na média, o povo é incrível, é tão bom trabalhar e viver com pessoas com histórias totalmente diferentes ou até mesmo com histórias similares mas tão distantes geográficamente; o Brasil é foda!</p>

<h3>O Paulistano (novamente!) &ndash; &ldquo;Povo frio&rdquo;</h3>

<p>Aqui faz muito frio haha, custumam dizer que o povo é meio frio também, metaforicamente; Distante.
Uma das minhas músicas preferidas atualmente é do Criolo. A música é velha mas música é isso, quando você menos espera ela se encaixa na sua vida :)</p>

<iframe width="560" height="315" src="http://cloudson.github.io//www.youtube.com/embed/Xo-gBWX_jXc" frameborder="0" allowfullscreen></iframe>


<p>De certa forma é verdade, as pessoas estão trabalhando a todo momento, o foco em atingir algo aqui é alto; começa no fazer as malas seja do nordestino, seja do mineiro que está vindo &ldquo;tentar a vida&rdquo;.
Mas isso não quer dizer que ser frio é ser desonesto. Você pode ser carioca e estar lendo isso agora, tem todo o direito de ficar ofendido; Mas eu acho o povo paulistano mais justo que o povo carioca, a cultura do malandro não me atrai.<br/>
Essa frieza também faz bem; enquanto que numa cidade de 100 mil habitantes se você fizer uma tatuagem na testa vai ser levado pra fogueira da pracinha, numa cidde de 13 milhões pff, dane-se você, fez a tatuagem, o problema é seu! A vida é sua! Então se você não se encaixa onde está agora, aqui de certo você se encaixará.</p>

<h3>&ldquo;Lá rola dinheiro&rdquo;</h3>

<p>Crescemos ouvindo isso, que em São Paulo rola dinheiro.
Rolar rola, mas as pessoas não vêem ou valorizam o que muitos paulistanos passam para ter seu carro e casa própria.
As pessoas trabalham duro aqui, fazem hora extra sem torcer bico, tem um emprego CLT e um negócio paralelo para tirar uma grana, acordam 4:30 da manhã para pegar o busão infernal.
Então pare de associar São Paulo e paulistanos com dinheiro fácil, (estude antes de querer um bom salário e) respeite os paulistanos pelo seu esforço, ok?<br/>
Se você quer trabalhar, aqui tem lugar, se você quer ganhar dinheiro, pense duas vezes antes de vir (Leia essa frase até conseguir entendê-la rs).</p>

<h3>Satisfação profissional</h3>

<p>Estou apaixonado pelo meu trabalho, e é justamente o que eu estava buscando para minha carreira. Se você é desenvolvedor como eu e se interessa por inovação, não quer ficar programando em php 5.2 ou com tecnologias da década passada, aqui você será feliz. Eu trabalho com um conjunto de ferramentas que não iria lidar em nenhuma empresa que conhecia (por dentro ou por fora) em Juiz de fora.  Num post futuro falarei mais sobre isso.</p>

<h3>Conclusão</h3>

<p>São Paulo é uma cidade intensa, tudo aqui é proporcional, ganha-se mais dinheiro, há mais gente, há mais coisa pra se fazer culturalmente, há mais desiguldade, há mais crimes, há mais tudo.</p>

<p>Eu não tinha conclusão quando comecei a escrever, a ideia era deixar o leitor decidir de acordo com minhas palavras, mas olha o tanto que eu escrevi.
Descobri que estou amando São Paulo e esta fase da vida, e amor é diferente de paixão, que dá e passa.
Quero ficar mais um cadim, reescrever conclusões e tirar novas.<br/>
Seria legal se você também desse sua opinião, já morou aqui? Quer vir pra cá? Quer saber mais de como é? Entre em contato :)<br/>
Ps:  Se você não ouviu a música, ouça! É melancólica, mas linda e sincera. Se gostar e não conhecer o cara, baixe um cd gratuito dele <a href="http://www.criolo.net/music.html">http://www.criolo.net/music.html</a>. Vai ter samba, rap, bolero&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(new Blog)->HelloWorld();]]></title>
    <link href="http://cloudson.github.io/2013/08/17/begin/"/>
    <updated>2013-08-17T00:01:00-03:00</updated>
    <id>http://cloudson.github.io/2013/08/17/begin</id>
    <content type="html"><![CDATA[<p>Da última vez que eu tive um blog, eu escrevi bastante mas publiquei pouco rsrs. Não me acho perfeccionista, me acho chato e por saber que minha escrita não é das melhores fico irritado e acabo demorando para chegar no nirvana do post hahaha.</p>

<h3>Quem é esse aí com cara de lesado?</h3>

<p><img src="http://en.gravatar.com/userimage/5255340/f664b6f32219eeef1bb0f287b40fa423.jpg?size=200" alt="It's me..." /></p>

<p>Sou o Claudson, um dia tive o insight de usar o trocadilho cloudson na internet, e acabei levando assim, sendo um tipo de filho das nuvens rs.<br/>
Sou mineiro, natural de <a href="http://pt.wikipedia.org/wiki/Muria%C3%A9">Muriaé</a>, comecei a gostar de computadores por causa de jogos, fui me interessando mais e acabei fazendo um curso chato de web design e html.<br/>
Estava tudo muito sem vida, e acabaram me falando que existiam linguagens de programação. Comecei com pascal mas não avancei muito, decidi me matar de estudar para passar no vestibular (tanto que só conheci o que era cerveja e balada com 17 anos haha) e apesar de não ter conseguido na federal de Viçosa (o subtítulo do blog tem a ver com isso), consegui na federal de Juiz de Fora.<br/>
Foram cinco longos e prazerosos anos de Ciência da Computação, e hoje, bacharel, tenho muito o que agradecer aos mestres de lá.<br/>
Durante essa caminhada fui começando a carreira como software developer, trabalhei tanto em agência, como em uma fábrica de software (não gosto muito desse termo rs). Sempre gostando mais da área, resolvi vir pra São Paulo interagir mais com o <a href="">phpsp</a> (estou tentando, juro!) e aprender novas tecnologias.
Já brinquei com ruby, python, js, <a href="https://github.com/cloudson/Bocejo">já fiz um compilador em C</a> rsrs, delphi (tá amarrado em nome de jesus!)&hellip; mas sempre levei minha carreira com php. Não tenho muito orgulho disso, php é uma linguagem que tem alguns problemas mas alguns frameworks e seus contribuidores levaram o ecossistema da linguagem para outro nível, nos últimos 5 anos.</p>

<h3>Por quê ter um blog?</h3>

<ul>
<li>Você pode escrever coisas para se lembrar no futuro :).</li>
<li>Você pode desabafar e criticar coisas sobre sua profissão (e eu tenho várias críticas guardadas rs).</li>
<li>Uma forma das pessoas te acharam rapidamente na internet.</li>
<li>Uma forma de ajudar a sua comunidade ou profissionais da sua área, compartilhando conhecimentos, mesmo que ínfimos.</li>
</ul>


<h3>Por quê agora vai ser diferente?</h3>

<ul>
<li>Github pages e octopress pra gerenciar o blog, eu não vou perdê-lo já que sempre estará na minha conta do github .</li>
<li>Estou mais dedicado a minha carreira, agora que a universidade FINALMENTE terminou .</li>
<li>Tenho conhecido pessoas e projetos legais, então mesmo que citá-los já seria útil pra terceiros.</li>
</ul>

]]></content>
  </entry>
  
</feed>
