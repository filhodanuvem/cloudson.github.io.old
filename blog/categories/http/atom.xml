<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTTP | Claudson Oliveira]]></title>
  <link href="http://cloudson.github.io/blog/categories/http/atom.xml" rel="self"/>
  <link href="http://cloudson.github.io/"/>
  <updated>2014-11-18T00:50:08-02:00</updated>
  <id>http://cloudson.github.io/</id>
  <author>
    <name><![CDATA[Claudson Oliveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[API's usando HAL - Uma comparação com websites]]></title>
    <link href="http://cloudson.github.io/2014/11/01/apis-uma-comparacao-com-websites/"/>
    <updated>2014-11-01T09:59:00-02:00</updated>
    <id>http://cloudson.github.io/2014/11/01/apis-uma-comparacao-com-websites</id>
    <content type="html"><![CDATA[<p>Novamente aqui para falar sobre HTTP e API&rsquo;s. Cada vez mais tenho tido a certeza de que apesar da necessidade, desenvolver serviços web envolve problemas arquiteturais muito complexos. Dessa vez viveremos um comparativo entre um serviço REST e websites.</p>

<h3>O que é um serviço web?</h3>

<p>Primeiro vamos dar nomes aos bois;</p>

<pre><code>"Um website é um conjunto de hipertextos acessíveis geralmente pelo protocolo HTTP na internet."
</code></pre>

<p>Ou seja, por uma página web, temos hipertexos que se ligam a outros hipertextos através de links, que via navegador são clicáveis.</p>

<p>Um serviço web é uma aplicação sob o http, criada com o intuito de prover informações a outras aplicações. Assim, se a prefeitura da sua cidade provê informações do posicionamento dos ônibus da cidade, ela possui um serviço web. Se o facebook consegue fornecer dados de usuários para que criemos aplicações, ele também fornece uma api, que seria uma maneira de se comunicar ao webservice.</p>

<p>Em um serviço web apenas o conteúdo é importante. Esse conteúdo pode ser dividio em estruturas que são representações de algo, uma representação de uma pessoa (e não a pessoa em si), uma representação de um lugar (e não o lugar em si). Essa representação é chamada de <em>recurso</em>.<br/>
Você também pode (e deve) desenvolver serviços com sua regra de negócio, afinal, hoje o mesmo dado utilizado num website é requerido por exemplo num aplicativo mobile.</p>

<h3>REST e SOAP</h3>

<p>Ao desenvolver uma API, podemos seguir um de dois padrões bem conhecidos. O primeiro é o SOAP, um padrão que faz com que criemos um tipo de mensagem com envelope, cabeçalho e corpo bem definidos, as transferências geralmente são em XML, é um padrão burocrático e verboso, porém bem flexível.<br/>
Outro padrão que cresceu muito nos últimos anos é o REST. Diferente do SOAP que exige uma descrição de rotas e mensagens, o REST usa o próprio HTTP como padrão de transporte de mensagens.
Ou seja, o corpo e o header das mensagens são os mesmos de uma request HTTP comum, veja abaixo uma request que pede um recurso usuário de id 5.</p>

<pre><code>GET /users/5
Host: api.meusite.com
</code></pre>

<p>Response:</p>

<pre><code>HTTP/1.1 200 OK
Content-type: application/json; charset=UTF-8

{
   id: 5,
   name: "Claudson Oliveira",
   email: "cloudson@outlook.com",
   access: [
       "2014-10-10 00:00:00", "2014-11-01 12:30:00"
   ]
}
</code></pre>

<p>A resposta da requisição retornou em formato json o recurso que contém, alem de id, nome e e-mail, um array com todas as datas de acesso desse usuário a aplicação (uma rede social, por exemplo)</p>

<h3>Content negotiation</h3>

<p>Como vimos no <a href="http://cloudson.github.io/2014/08/12/entendendo-uma-negociacao-de-conteudo-via-cartas/">post sobre negociação de conteúdo</a>, via cabeçalho HTTP podemos dizer a um serviço que gostaríamos de receber um recurso num certo mime-type. Pense agora em requisitar o mesmor recurso user em HTML</p>

<pre><code>GET /users/5
Host: api.meusite.com
Accept: text/html; q=1.0 , application/json; 0.5
</code></pre>

<p>Response
<img src="./images/posts/twitter-profile.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
